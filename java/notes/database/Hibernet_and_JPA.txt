

JPA (Java Persistence API):
	. JPA is a Java specification that defines how ORM (Object-Relational Mapping) should work in Java applications. It provides a set of rules and guidelines for implementing object-relational mapping.
	. JPA is an API that defines how Java objects can be mapped to relational databases. It provides a high-level abstraction, eliminating the need for direct JDBC or SQL code.
	
	. JPA is only a specification; it doesn’t perform any functionality by itself.
	. It defines interfaces for implementing ORM.
	. Supports cleaner and more integrated object-relational mapping.
	. Allows dynamic and named queries.
	. It’s like the “guidelines” for ORM.
	
	Integration:
		Spring Boot integrates JPA seamlessly. When you include the spring-boot-starter-data-jpa dependency in your project, it brings in JPA API, JPA Implementation (which is Hibernate by default), JDBC, and other necessary libraries.
		
	Configuration:
		 In your application.properties or application.yml, you can configure the database connection details (e.g., URL, username, password, dialect). Spring Boot automatically sets up the data source and initializes Hibernate.
	
	Implementation: 
		JPA doesn’t do anything on its own; it needs an implementation. That’s where Hibernate comes in!.
	
	Core concepts:
		. Entity: A Java class representing a database table.
		. EntityManager: The primary interface for interacting with the persistence context (a unit of work).
		. Persistence context: A container for managed entities.
		. Transaction: A unit of work that ensures data consistency.
		
		
Hibernate:
	. Hibernate is an open-source, lightweight ORM tool for Java. It simplifies building Java applications that interact with relational databases.
	. Hibernate is a popular open-source JPA implementation that provides additional features and optimizations.
	.  It acts as an Object-Relational Mapping (ORM) framework, mapping Java objects to relational database tables.


	
	. Hibernate is an implementation of JPA guidelines.
	. It maps Java classes to database tables.
	. It handles Java data types to SQL data types conversion.
	. Provides additional features beyond the JPA specification.
	
	Key features:
		. Query language: Hibernate Query Language (HQL) for querying data.
		. Caching: Provides caching mechanisms for improving performance.
		. Lazy loading: Deferring the loading of associated entities until they are accessed.
		. Additional features: Support for native SQL, batching, and more.
	
	Example: 
		Suppose you have an entity class representing a Product. 
		With JPA, you’d define annotations like @Entity, @Id, and @Column to map it to a database table. 
		Hibernate, as the JPA implementation, would handle the actual persistence of Product instances to the database.
		
	So, in summary: Hibernate is the “doer,” while JPA sets the ground rules. They work together to make Java persistence a breeze!
	
	
	Additional notes:
		. You can customize Hibernate's behavior using configuration properties in the application.properties file.
		. Consider using Spring Data JPA's query methods or @Query annotations for more complex queries.
		. For advanced scenarios, you can directly use Hibernate's APIs, but it's generally recommended to stick with the JPA specification for better portability.
		
		
	@Entity: Marks the class as a JPA entity.
	@Id: Marks the primary key field.
	@GeneratedValue: Defines how the primary key should be generated (e.g., AUTO, IDENTITY, SEQUENCE).
	
	
======================================================================================================================================================================================
	
	
	Hibernet :
-----------
	* Hibernate is a java framework that simplifies the development of java application to interact with database.
	* Hibernate is ORM(Object Relation Mapping) tool.
	* Hibernate is open source, lightweight.
	* Hibernate is a loosely coupled framework, means it won't forces the programmer to extend/implement any class/interface.	
	* Any type of application can build with Hibernate Framework.

			class --> Object(Data) --> Hibernate Framework <--> DB(Data)
			

	Core Functionalities:

	. Object-Relational Mapping: 
		Maps Java classes and their properties to database tables and columns, respectively. This eliminates the need for writing complex SQL queries directly, improving developer productivity.
	. Automatic SQL Generation: 
		Based on your object definitions, Hibernate automatically generates efficient SQL queries for data persistence (INSERT, UPDATE, DELETE), retrieval (SELECT), and other database operations.
	. Caching: 
		Stores frequently accessed data in memory for faster retrieval, enhancing application performance.
	. Transaction Management: 
		Handles database transactions (commit, rollback) automatically, ensuring data consistency and integrity.
	. Query Language (HQL): 
		Provides a high-level, object-oriented query language (Hibernate Query Language) that resembles SQL but operates on objects, reducing the need for writing raw SQL and promoting database independence (queries can work with different databases).
		
		
Drawbacks of Hibernate :
	. SQL Generation: 
		Hibernate generates SQL statements at runtime, which can sometimes lead to performance overhead compared to hand-written SQL queries, especially for complex queries.
	. Caching: 
		While Hibernate has caching mechanisms, effective configuration and management are crucial to avoid performance bottlenecks.		
	. Data Modeling: 
		Translating relational data into object-oriented models can sometimes lead to design challenges and performance implications.
	. Less Flexibility for Complex Queries: 
		While Hibernate offers query capabilities, it might not be as flexible as hand-written SQL for highly complex queries.
		
Benefits of Using Hibernate:
	. Increased Productivity: 
		Less time is spent writing and maintaining complex SQL queries, allowing developers to focus on application logic.
	. Improved Maintainability: 
		Object-oriented data access code is easier to understand and maintain than raw SQL, especially for complex data models.
	. Database Independence: 
		Hibernate handles mapping between objects and tables, making applications less dependent on the underlying database schema. Changes to the database schema can often be accommodated with minimal code modifications in Hibernate mappings.
	. Transaction Management: 
		Automatic transaction handling ensures data consistency and reduces the risk of errors.
	. Caching: 
		Improved performance by caching frequently accessed data in memory.
		
		
	Additional Considerations:

	. Hibernate supports various mapping annotations (e.g., @Entity, @Id, @Column) to further define object-to-table relationships and property-to-column mappings.
	. Hibernate offers advanced features like lazy loading, eager fetching, criteria queries, and more to optimize data retrieval and manipulation.
	
	
	Example Code:
	
	1. Product Class:
	
		@Entity
		public class Product {
			@Id
			@Column
			private Long id;
			private String name;
			private Double price;

			// Getters and setters omitted for brevity
		}
		
	
	2. Hibernate Configuration (hibernate.cfg.xml):
	
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE hibernate-configuration PUBLIC
				"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
				"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
		<hibernate-configuration>
			<session-factory>
				<property name="connection.driver_class">org.h2.Driver</property>
				<property name="connection.url">jdbc:h2:mem:testdb</property>
				<property name="connection.username">sa</property>
				<property name="connection.password"></property>
				<property name="hibernate.dialect">org.hibernate.dialect.H2Dialect</property>
				<mapping class="com.example.Product" />  
			</session-factory>
		</hibernate-configuration>
		
		
	3. Saving a Product Object:
			
		Product product = new Product();
		product.setName("T-Shirt");
		product.setPrice(24.99);

		SessionFactory sessionFactory = // Create a Hibernate session factory
		Session session = sessionFactory.openSession();

		session.beginTransaction();
		session.save(product);  // Save the Product object
		session.getTransaction().commit();

		session.close();


	Hibernate persistance lifecycle state :
	1. Transient state : 
		When we create object and set value using getter/setter or constructor then objects goes into transient state.
		Transient state object data does not go in DB or session object.
		
	2. Persistance state : 
		When we save or update or persist transient object using session it goes into Persistent state.
		Persistance state object data goes into session object and DB also.
		If we make any changes in persistent state object the changes will reflect in DB and session object both.

	3. Detached state : 
		When we close or clear Persistent state object it goes into Detached state.
		Detached state object data goes into DB only but did not goes into session object.
		Ater updating Detached state using session it again goes into Persistent state.
		
	4. Removed state :
		When we delete Persistent state object it goes only in session object and did not go into DB.


	example --
		public class Product {
			@Id
			private Long id;
			private String name;
			private Double price;
			// Getters and setters omitted for brevity
		}

		public static void main(String[] args) {
			SessionFactory sessionFactory = // Create a Hibernate session factory
			Session session = sessionFactory.openSession();

			// Transient state
			Product product = new Product();
			product.setName("T-Shirt");
			product.setPrice(24.99);

			// Save the product (Transient -> Persistent)
			session.beginTransaction();
			session.save(product);
			session.getTransaction().commit();

			// Now product is in the Persistent state

			// Detach the product (Persistent -> Detached)
			session.detach(product);

			// Modifications to product in detached state won't be reflected in the database

			// Reattach the product to a new session (Detached -> Persistent)
			session = sessionFactory.openSession();
			session.beginTransaction();
			session.attach(product);

			// Update the product's price (Persistent)
			product.setPrice(19.99);

			// Commit the transaction (updates are flushed to the database)
			session.getTransaction().commit();

			// Delete the product (Persistent -> Removed)
			session.delete(product);
			session.getTransaction().commit();

			session.close();
		}



======================================================================================================================================================================================